# Generated by Django 2.2.5 on 2019-09-23 07:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import kokeilunpaikka.utils.models
import parler.fields
import parler.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('themes', '0001_initial'),
        ('uploads', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('description', models.TextField(verbose_name='description')),
                ('is_published', models.BooleanField(default=False, verbose_name='is published')),
                ('language', models.CharField(choices=[('fi', 'fin'), ('sv', 'sve'), ('en', 'eng')], default='fi', max_length=2, verbose_name='language')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('organizer', models.CharField(blank=True, help_text='Name of the person or organization organizing the experiment.', max_length=255, verbose_name='organizer')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, help_text='Automatically generated user-friendly short text that is used in the URL shown in the address bar to identify and describe this resource.', max_length=255, populate_from='name', unique=True, verbose_name='slug')),
                ('success_rating', models.IntegerField(blank=True, help_text='Rating with a value from 1 to 10.', null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)], verbose_name='success rating')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'experiment',
                'verbose_name_plural': 'experiments',
            },
        ),
        migrations.CreateModel(
            name='ExperimentChallenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('ends_at', models.DateTimeField(null=True, verbose_name='ends at')),
                ('image', models.ImageField(upload_to='experiment_challenges/', verbose_name='image')),
                ('is_visible', models.BooleanField(default=True, verbose_name='is visible')),
                ('lead_text', models.TextField(blank=True, help_text='Emphasized opening content of the challenge.', verbose_name='lead text')),
                ('starts_at', models.DateTimeField(null=True, verbose_name='starts at')),
                ('themes', models.ManyToManyField(blank=True, to='themes.Theme', verbose_name='themes')),
            ],
            options={
                'verbose_name': 'experiment challenge',
                'verbose_name_plural': 'experiment challenges',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExperimentLookingForOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'experiment looking for option',
                'verbose_name_plural': 'experiment looking for options',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExperimentPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('content', kokeilunpaikka.utils.models.SanitizedRichTextField(verbose_name='content')),
                ('title', models.CharField(max_length=255, verbose_name='name')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='experiments.Experiment', verbose_name='experiment')),
                ('images', models.ManyToManyField(blank=True, to='uploads.Image', verbose_name='images')),
            ],
            options={
                'verbose_name': 'experiment post',
                'verbose_name_plural': 'experiment posts',
            },
        ),
        migrations.CreateModel(
            name='ExperimentPostComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('content', models.TextField(verbose_name='content')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('experiment_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='experiments.ExperimentPost', verbose_name='experiment post')),
            ],
            options={
                'verbose_name': 'experiment post comment',
                'verbose_name_plural': 'experiment post comments',
            },
        ),
        migrations.CreateModel(
            name='ExperimentLookingForOptionTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('value', models.CharField(max_length=255, verbose_name='value')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='experiments.ExperimentLookingForOption')),
            ],
            options={
                'verbose_name': 'experiment looking for option Translation',
                'db_table': 'experiments_experimentlookingforoption_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExperimentExternalLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('url', models.URLField(verbose_name='External link (URL)')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_links', to='experiments.Experiment', verbose_name='experiment')),
            ],
            options={
                'verbose_name': 'experiment external link',
                'verbose_name_plural': 'experiment external links',
            },
        ),
        migrations.CreateModel(
            name='ExperimentChallengeTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('description', kokeilunpaikka.utils.models.SanitizedRichTextField(verbose_name='description')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(help_text='Automatically generated user-friendly short text that is used in the URL shown in the address bar to identify and describe this resource.', max_length=255, unique=True, verbose_name='slug')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='experiments.ExperimentChallenge')),
            ],
            options={
                'verbose_name': 'experiment challenge Translation',
                'db_table': 'experiments_experimentchallenge_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExperimentChallengeTimelineEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('date', models.DateField(verbose_name='date')),
                ('content', models.TextField(verbose_name='content')),
                ('experiment_challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.ExperimentChallenge', verbose_name='experiment challenge')),
            ],
            options={
                'verbose_name': 'experiment challenge timeline entry',
                'verbose_name_plural': 'experiment challenge timeline entries',
                'ordering': ('date', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='ExperimentChallengeMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_approved', models.BooleanField(default=False, verbose_name='is approved')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.Experiment', verbose_name='experiment')),
                ('experiment_challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.ExperimentChallenge', verbose_name='experiment challenge')),
            ],
            options={
                'verbose_name': 'experiment challenge membership',
                'verbose_name_plural': 'experiment challenge memberships',
            },
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_challenges',
            field=models.ManyToManyField(blank=True, through='experiments.ExperimentChallengeMembership', to='experiments.ExperimentChallenge', verbose_name='experiment challenges'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='uploads.Image', verbose_name='image'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='looking_for',
            field=models.ManyToManyField(blank=True, help_text='Options determining what kind of things are looked for the experiment in the service.', to='experiments.ExperimentLookingForOption', verbose_name='looking for'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='responsible_users',
            field=models.ManyToManyField(help_text='Users who have full management permissions to this experiment.', related_name='owned_experiments', to=settings.AUTH_USER_MODEL, verbose_name='responsible users'),
        ),
    ]
