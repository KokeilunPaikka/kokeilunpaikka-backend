# Generated by Django 2.2.5 on 2019-09-23 07:02

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import parler.fields
import parler.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('experiments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('stage_number', models.IntegerField(help_text='Determines the stage of an experiment numerically. Numbers should be in the ascending order, largest number indicating the last stage of an experiment. Numbering should start from one (1).', primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='stage number')),
            ],
            options={
                'verbose_name': 'stage',
                'verbose_name_plural': 'stages',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_public', models.BooleanField(default=True, help_text='Determines whether the question and the related answer is shown in the detail page of an experiment. Non-public questions can be used for gathering private background information.', verbose_name='is public')),
                ('experiment_challenge', models.ForeignKey(blank=True, help_text='Question can be attached to a specific experiment challenge and thus is only asked if the experiment is attached for such challenge.', null=True, on_delete=django.db.models.deletion.CASCADE, to='experiments.ExperimentChallenge', verbose_name='experiment challenge')),
                ('stage', models.ForeignKey(help_text='Question should be presented when trying to proceed to this specific stage.', on_delete=django.db.models.deletion.PROTECT, to='stages.Stage', verbose_name='stage')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StageTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('description', models.TextField(verbose_name='description')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='stages.Stage')),
            ],
            options={
                'verbose_name': 'stage Translation',
                'db_table': 'stages_stage_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('question', models.CharField(max_length=255, verbose_name='question')),
                ('description', models.TextField(help_text='Detailed instructions for answering the question. Visible as a placeholder text in the form field.', verbose_name='description')),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='stages.Question')),
            ],
            options={
                'verbose_name': 'question Translation',
                'db_table': 'stages_question_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('value', models.TextField(verbose_name='value')),
                ('answered_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='answered by')),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='experiments.Experiment', verbose_name='experiment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='stages.Question', verbose_name='question')),
            ],
            options={
                'verbose_name': 'question answer',
                'verbose_name_plural': 'question answers',
                'unique_together': {('experiment', 'question')},
            },
        ),
    ]
